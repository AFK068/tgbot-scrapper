// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/AFK068/bot/internal/api/openapi/scrapper/v1"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// DeleteLinks provides a mock function with given fields: ctx, tgChatID, link
func (_m *Service) DeleteLinks(ctx context.Context, tgChatID int64, link v1.RemoveLinkRequest) error {
	ret := _m.Called(ctx, tgChatID, link)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, v1.RemoveLinkRequest) error); ok {
		r0 = rf(ctx, tgChatID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLinks'
type Service_DeleteLinks_Call struct {
	*mock.Call
}

// DeleteLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - tgChatID int64
//   - link v1.RemoveLinkRequest
func (_e *Service_Expecter) DeleteLinks(ctx interface{}, tgChatID interface{}, link interface{}) *Service_DeleteLinks_Call {
	return &Service_DeleteLinks_Call{Call: _e.mock.On("DeleteLinks", ctx, tgChatID, link)}
}

func (_c *Service_DeleteLinks_Call) Run(run func(ctx context.Context, tgChatID int64, link v1.RemoveLinkRequest)) *Service_DeleteLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(v1.RemoveLinkRequest))
	})
	return _c
}

func (_c *Service_DeleteLinks_Call) Return(_a0 error) *Service_DeleteLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteLinks_Call) RunAndReturn(run func(context.Context, int64, v1.RemoveLinkRequest) error) *Service_DeleteLinks_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTgChatID provides a mock function with given fields: ctx, id
func (_m *Service) DeleteTgChatID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTgChatID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteTgChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTgChatID'
type Service_DeleteTgChatID_Call struct {
	*mock.Call
}

// DeleteTgChatID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Service_Expecter) DeleteTgChatID(ctx interface{}, id interface{}) *Service_DeleteTgChatID_Call {
	return &Service_DeleteTgChatID_Call{Call: _e.mock.On("DeleteTgChatID", ctx, id)}
}

func (_c *Service_DeleteTgChatID_Call) Run(run func(ctx context.Context, id int64)) *Service_DeleteTgChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Service_DeleteTgChatID_Call) Return(_a0 error) *Service_DeleteTgChatID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteTgChatID_Call) RunAndReturn(run func(context.Context, int64) error) *Service_DeleteTgChatID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with given fields: ctx, tgChatID, tag
func (_m *Service) GetLinks(ctx context.Context, tgChatID int64, tag ...string) (v1.ListLinksResponse, error) {
	_va := make([]interface{}, len(tag))
	for _i := range tag {
		_va[_i] = tag[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tgChatID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 v1.ListLinksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) (v1.ListLinksResponse, error)); ok {
		return rf(ctx, tgChatID, tag...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) v1.ListLinksResponse); ok {
		r0 = rf(ctx, tgChatID, tag...)
	} else {
		r0 = ret.Get(0).(v1.ListLinksResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...string) error); ok {
		r1 = rf(ctx, tgChatID, tag...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type Service_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - tgChatID int64
//   - tag ...string
func (_e *Service_Expecter) GetLinks(ctx interface{}, tgChatID interface{}, tag ...interface{}) *Service_GetLinks_Call {
	return &Service_GetLinks_Call{Call: _e.mock.On("GetLinks",
		append([]interface{}{ctx, tgChatID}, tag...)...)}
}

func (_c *Service_GetLinks_Call) Run(run func(ctx context.Context, tgChatID int64, tag ...string)) *Service_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *Service_GetLinks_Call) Return(_a0 v1.ListLinksResponse, _a1 error) *Service_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetLinks_Call) RunAndReturn(run func(context.Context, int64, ...string) (v1.ListLinksResponse, error)) *Service_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// PostLinks provides a mock function with given fields: ctx, tgChatID, link
func (_m *Service) PostLinks(ctx context.Context, tgChatID int64, link v1.AddLinkRequest) error {
	ret := _m.Called(ctx, tgChatID, link)

	if len(ret) == 0 {
		panic("no return value specified for PostLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, v1.AddLinkRequest) error); ok {
		r0 = rf(ctx, tgChatID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_PostLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLinks'
type Service_PostLinks_Call struct {
	*mock.Call
}

// PostLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - tgChatID int64
//   - link v1.AddLinkRequest
func (_e *Service_Expecter) PostLinks(ctx interface{}, tgChatID interface{}, link interface{}) *Service_PostLinks_Call {
	return &Service_PostLinks_Call{Call: _e.mock.On("PostLinks", ctx, tgChatID, link)}
}

func (_c *Service_PostLinks_Call) Run(run func(ctx context.Context, tgChatID int64, link v1.AddLinkRequest)) *Service_PostLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(v1.AddLinkRequest))
	})
	return _c
}

func (_c *Service_PostLinks_Call) Return(_a0 error) *Service_PostLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_PostLinks_Call) RunAndReturn(run func(context.Context, int64, v1.AddLinkRequest) error) *Service_PostLinks_Call {
	_c.Call.Return(run)
	return _c
}

// PostTgChatID provides a mock function with given fields: ctx, id
func (_m *Service) PostTgChatID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PostTgChatID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_PostTgChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTgChatID'
type Service_PostTgChatID_Call struct {
	*mock.Call
}

// PostTgChatID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Service_Expecter) PostTgChatID(ctx interface{}, id interface{}) *Service_PostTgChatID_Call {
	return &Service_PostTgChatID_Call{Call: _e.mock.On("PostTgChatID", ctx, id)}
}

func (_c *Service_PostTgChatID_Call) Run(run func(ctx context.Context, id int64)) *Service_PostTgChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Service_PostTgChatID_Call) Return(_a0 error) *Service_PostTgChatID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_PostTgChatID_Call) RunAndReturn(run func(context.Context, int64) error) *Service_PostTgChatID_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

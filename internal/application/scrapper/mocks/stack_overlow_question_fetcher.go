// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	stackoverflow "github.com/AFK068/bot/pkg/client/stackoverflow"
)

// StackOverlowQuestionFetcher is an autogenerated mock type for the StackOverlowQuestionFetcher type
type StackOverlowQuestionFetcher struct {
	mock.Mock
}

type StackOverlowQuestionFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *StackOverlowQuestionFetcher) EXPECT() *StackOverlowQuestionFetcher_Expecter {
	return &StackOverlowQuestionFetcher_Expecter{mock: &_m.Mock}
}

// GetQuestion provides a mock function with given fields: ctx, questionURL
func (_m *StackOverlowQuestionFetcher) GetQuestion(ctx context.Context, questionURL string) (*stackoverflow.Question, error) {
	ret := _m.Called(ctx, questionURL)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestion")
	}

	var r0 *stackoverflow.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*stackoverflow.Question, error)); ok {
		return rf(ctx, questionURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *stackoverflow.Question); ok {
		r0 = rf(ctx, questionURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stackoverflow.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StackOverlowQuestionFetcher_GetQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestion'
type StackOverlowQuestionFetcher_GetQuestion_Call struct {
	*mock.Call
}

// GetQuestion is a helper method to define mock.On call
//   - ctx context.Context
//   - questionURL string
func (_e *StackOverlowQuestionFetcher_Expecter) GetQuestion(ctx interface{}, questionURL interface{}) *StackOverlowQuestionFetcher_GetQuestion_Call {
	return &StackOverlowQuestionFetcher_GetQuestion_Call{Call: _e.mock.On("GetQuestion", ctx, questionURL)}
}

func (_c *StackOverlowQuestionFetcher_GetQuestion_Call) Run(run func(ctx context.Context, questionURL string)) *StackOverlowQuestionFetcher_GetQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *StackOverlowQuestionFetcher_GetQuestion_Call) Return(_a0 *stackoverflow.Question, _a1 error) *StackOverlowQuestionFetcher_GetQuestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StackOverlowQuestionFetcher_GetQuestion_Call) RunAndReturn(run func(context.Context, string) (*stackoverflow.Question, error)) *StackOverlowQuestionFetcher_GetQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// NewStackOverlowQuestionFetcher creates a new instance of StackOverlowQuestionFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStackOverlowQuestionFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *StackOverlowQuestionFetcher {
	mock := &StackOverlowQuestionFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/AFK068/bot/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ChatLinkRepository is an autogenerated mock type for the ChatLinkRepository type
type ChatLinkRepository struct {
	mock.Mock
}

type ChatLinkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatLinkRepository) EXPECT() *ChatLinkRepository_Expecter {
	return &ChatLinkRepository_Expecter{mock: &_m.Mock}
}

// CheckUserExistence provides a mock function with given fields: chatID
func (_m *ChatLinkRepository) CheckUserExistence(chatID int64) bool {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExistence")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ChatLinkRepository_CheckUserExistence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserExistence'
type ChatLinkRepository_CheckUserExistence_Call struct {
	*mock.Call
}

// CheckUserExistence is a helper method to define mock.On call
//   - chatID int64
func (_e *ChatLinkRepository_Expecter) CheckUserExistence(chatID interface{}) *ChatLinkRepository_CheckUserExistence_Call {
	return &ChatLinkRepository_CheckUserExistence_Call{Call: _e.mock.On("CheckUserExistence", chatID)}
}

func (_c *ChatLinkRepository_CheckUserExistence_Call) Run(run func(chatID int64)) *ChatLinkRepository_CheckUserExistence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ChatLinkRepository_CheckUserExistence_Call) Return(_a0 bool) *ChatLinkRepository_CheckUserExistence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_CheckUserExistence_Call) RunAndReturn(run func(int64) bool) *ChatLinkRepository_CheckUserExistence_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChat provides a mock function with given fields: chatID
func (_m *ChatLinkRepository) DeleteChat(chatID int64) error {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatLinkRepository_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type ChatLinkRepository_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - chatID int64
func (_e *ChatLinkRepository_Expecter) DeleteChat(chatID interface{}) *ChatLinkRepository_DeleteChat_Call {
	return &ChatLinkRepository_DeleteChat_Call{Call: _e.mock.On("DeleteChat", chatID)}
}

func (_c *ChatLinkRepository_DeleteChat_Call) Run(run func(chatID int64)) *ChatLinkRepository_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ChatLinkRepository_DeleteChat_Call) Return(_a0 error) *ChatLinkRepository_DeleteChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_DeleteChat_Call) RunAndReturn(run func(int64) error) *ChatLinkRepository_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLink provides a mock function with given fields: chatID, link
func (_m *ChatLinkRepository) DeleteLink(chatID int64, link *domain.Link) error {
	ret := _m.Called(chatID, link)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *domain.Link) error); ok {
		r0 = rf(chatID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatLinkRepository_DeleteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLink'
type ChatLinkRepository_DeleteLink_Call struct {
	*mock.Call
}

// DeleteLink is a helper method to define mock.On call
//   - chatID int64
//   - link *domain.Link
func (_e *ChatLinkRepository_Expecter) DeleteLink(chatID interface{}, link interface{}) *ChatLinkRepository_DeleteLink_Call {
	return &ChatLinkRepository_DeleteLink_Call{Call: _e.mock.On("DeleteLink", chatID, link)}
}

func (_c *ChatLinkRepository_DeleteLink_Call) Run(run func(chatID int64, link *domain.Link)) *ChatLinkRepository_DeleteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*domain.Link))
	})
	return _c
}

func (_c *ChatLinkRepository_DeleteLink_Call) Return(_a0 error) *ChatLinkRepository_DeleteLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_DeleteLink_Call) RunAndReturn(run func(int64, *domain.Link) error) *ChatLinkRepository_DeleteLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLinks provides a mock function with no fields
func (_m *ChatLinkRepository) GetAllLinks() []*domain.Link {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllLinks")
	}

	var r0 []*domain.Link
	if rf, ok := ret.Get(0).(func() []*domain.Link); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	return r0
}

// ChatLinkRepository_GetAllLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLinks'
type ChatLinkRepository_GetAllLinks_Call struct {
	*mock.Call
}

// GetAllLinks is a helper method to define mock.On call
func (_e *ChatLinkRepository_Expecter) GetAllLinks() *ChatLinkRepository_GetAllLinks_Call {
	return &ChatLinkRepository_GetAllLinks_Call{Call: _e.mock.On("GetAllLinks")}
}

func (_c *ChatLinkRepository_GetAllLinks_Call) Run(run func()) *ChatLinkRepository_GetAllLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChatLinkRepository_GetAllLinks_Call) Return(_a0 []*domain.Link) *ChatLinkRepository_GetAllLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_GetAllLinks_Call) RunAndReturn(run func() []*domain.Link) *ChatLinkRepository_GetAllLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatIDsByLink provides a mock function with given fields: link
func (_m *ChatLinkRepository) GetChatIDsByLink(link *domain.Link) []int64 {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for GetChatIDsByLink")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func(*domain.Link) []int64); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// ChatLinkRepository_GetChatIDsByLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatIDsByLink'
type ChatLinkRepository_GetChatIDsByLink_Call struct {
	*mock.Call
}

// GetChatIDsByLink is a helper method to define mock.On call
//   - link *domain.Link
func (_e *ChatLinkRepository_Expecter) GetChatIDsByLink(link interface{}) *ChatLinkRepository_GetChatIDsByLink_Call {
	return &ChatLinkRepository_GetChatIDsByLink_Call{Call: _e.mock.On("GetChatIDsByLink", link)}
}

func (_c *ChatLinkRepository_GetChatIDsByLink_Call) Run(run func(link *domain.Link)) *ChatLinkRepository_GetChatIDsByLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Link))
	})
	return _c
}

func (_c *ChatLinkRepository_GetChatIDsByLink_Call) Return(_a0 []int64) *ChatLinkRepository_GetChatIDsByLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_GetChatIDsByLink_Call) RunAndReturn(run func(*domain.Link) []int64) *ChatLinkRepository_GetChatIDsByLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetListLinks provides a mock function with given fields: chatID
func (_m *ChatLinkRepository) GetListLinks(chatID int64) ([]*domain.Link, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetListLinks")
	}

	var r0 []*domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*domain.Link, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*domain.Link); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatLinkRepository_GetListLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListLinks'
type ChatLinkRepository_GetListLinks_Call struct {
	*mock.Call
}

// GetListLinks is a helper method to define mock.On call
//   - chatID int64
func (_e *ChatLinkRepository_Expecter) GetListLinks(chatID interface{}) *ChatLinkRepository_GetListLinks_Call {
	return &ChatLinkRepository_GetListLinks_Call{Call: _e.mock.On("GetListLinks", chatID)}
}

func (_c *ChatLinkRepository_GetListLinks_Call) Run(run func(chatID int64)) *ChatLinkRepository_GetListLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ChatLinkRepository_GetListLinks_Call) Return(_a0 []*domain.Link, _a1 error) *ChatLinkRepository_GetListLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChatLinkRepository_GetListLinks_Call) RunAndReturn(run func(int64) ([]*domain.Link, error)) *ChatLinkRepository_GetListLinks_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterChat provides a mock function with given fields: chatID
func (_m *ChatLinkRepository) RegisterChat(chatID int64) error {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for RegisterChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatLinkRepository_RegisterChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterChat'
type ChatLinkRepository_RegisterChat_Call struct {
	*mock.Call
}

// RegisterChat is a helper method to define mock.On call
//   - chatID int64
func (_e *ChatLinkRepository_Expecter) RegisterChat(chatID interface{}) *ChatLinkRepository_RegisterChat_Call {
	return &ChatLinkRepository_RegisterChat_Call{Call: _e.mock.On("RegisterChat", chatID)}
}

func (_c *ChatLinkRepository_RegisterChat_Call) Run(run func(chatID int64)) *ChatLinkRepository_RegisterChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ChatLinkRepository_RegisterChat_Call) Return(_a0 error) *ChatLinkRepository_RegisterChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_RegisterChat_Call) RunAndReturn(run func(int64) error) *ChatLinkRepository_RegisterChat_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLink provides a mock function with given fields: chatID, link
func (_m *ChatLinkRepository) SaveLink(chatID int64, link *domain.Link) error {
	ret := _m.Called(chatID, link)

	if len(ret) == 0 {
		panic("no return value specified for SaveLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *domain.Link) error); ok {
		r0 = rf(chatID, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatLinkRepository_SaveLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLink'
type ChatLinkRepository_SaveLink_Call struct {
	*mock.Call
}

// SaveLink is a helper method to define mock.On call
//   - chatID int64
//   - link *domain.Link
func (_e *ChatLinkRepository_Expecter) SaveLink(chatID interface{}, link interface{}) *ChatLinkRepository_SaveLink_Call {
	return &ChatLinkRepository_SaveLink_Call{Call: _e.mock.On("SaveLink", chatID, link)}
}

func (_c *ChatLinkRepository_SaveLink_Call) Run(run func(chatID int64, link *domain.Link)) *ChatLinkRepository_SaveLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*domain.Link))
	})
	return _c
}

func (_c *ChatLinkRepository_SaveLink_Call) Return(_a0 error) *ChatLinkRepository_SaveLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_SaveLink_Call) RunAndReturn(run func(int64, *domain.Link) error) *ChatLinkRepository_SaveLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastCheck provides a mock function with given fields: link
func (_m *ChatLinkRepository) UpdateLastCheck(link *domain.Link) error {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatLinkRepository_UpdateLastCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastCheck'
type ChatLinkRepository_UpdateLastCheck_Call struct {
	*mock.Call
}

// UpdateLastCheck is a helper method to define mock.On call
//   - link *domain.Link
func (_e *ChatLinkRepository_Expecter) UpdateLastCheck(link interface{}) *ChatLinkRepository_UpdateLastCheck_Call {
	return &ChatLinkRepository_UpdateLastCheck_Call{Call: _e.mock.On("UpdateLastCheck", link)}
}

func (_c *ChatLinkRepository_UpdateLastCheck_Call) Run(run func(link *domain.Link)) *ChatLinkRepository_UpdateLastCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Link))
	})
	return _c
}

func (_c *ChatLinkRepository_UpdateLastCheck_Call) Return(_a0 error) *ChatLinkRepository_UpdateLastCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatLinkRepository_UpdateLastCheck_Call) RunAndReturn(run func(*domain.Link) error) *ChatLinkRepository_UpdateLastCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatLinkRepository creates a new instance of ChatLinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatLinkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatLinkRepository {
	mock := &ChatLinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

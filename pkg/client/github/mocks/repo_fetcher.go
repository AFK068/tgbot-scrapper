// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/AFK068/bot/pkg/client/github"
	mock "github.com/stretchr/testify/mock"
)

// RepoFetcher is an autogenerated mock type for the RepoFetcher type
type RepoFetcher struct {
	mock.Mock
}

type RepoFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoFetcher) EXPECT() *RepoFetcher_Expecter {
	return &RepoFetcher_Expecter{mock: &_m.Mock}
}

// GetRepo provides a mock function with given fields: ctx, questionURL
func (_m *RepoFetcher) GetRepo(ctx context.Context, questionURL string) (*github.Repository, error) {
	ret := _m.Called(ctx, questionURL)

	if len(ret) == 0 {
		panic("no return value specified for GetRepo")
	}

	var r0 *github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*github.Repository, error)); ok {
		return rf(ctx, questionURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.Repository); ok {
		r0 = rf(ctx, questionURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, questionURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoFetcher_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type RepoFetcher_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - questionURL string
func (_e *RepoFetcher_Expecter) GetRepo(ctx interface{}, questionURL interface{}) *RepoFetcher_GetRepo_Call {
	return &RepoFetcher_GetRepo_Call{Call: _e.mock.On("GetRepo", ctx, questionURL)}
}

func (_c *RepoFetcher_GetRepo_Call) Run(run func(ctx context.Context, questionURL string)) *RepoFetcher_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RepoFetcher_GetRepo_Call) Return(_a0 *github.Repository, _a1 error) *RepoFetcher_GetRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoFetcher_GetRepo_Call) RunAndReturn(run func(context.Context, string) (*github.Repository, error)) *RepoFetcher_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoFetcher creates a new instance of RepoFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoFetcher {
	mock := &RepoFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
